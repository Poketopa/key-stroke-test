import json

def analyze_patterns():
    """패턴 분석"""
    
    # 사용자 A의 등록 패턴들 (helloworld)
    user_a_patterns = [
        "0,3.2,0,1,6,3255507267,0,-1,-1,0,-1,-1,0,-1,-1,6,93,62,6,44,35,1,0,0,1,2,1,4210384742,1,1,0,0,0,1,2560,1440,2,1015,138,0,2343085426|104,17859,45,72|101,80,104,69|108,162,66,76|108,123,69,76|111,107,75,79|119,116,73,87|111,123,69,79|114,162,66,82|108,123,69,76|100,116,73,68",
        "0,3.2,0,1,6,3255507267,0,-1,-1,0,-1,-1,0,-1,-1,8,120,98,8,51,47,1,0,0,1,2,1,4210384742,1,1,0,0,0,1,2560,1440,2,1015,138,0,2343085426|104,17859,45,72|101,80,104,69|108,162,66,76|108,123,69,76|111,107,75,79|119,116,73,87|111,123,69,79|114,162,66,82|108,123,69,76|100,116,73,68",
        "0,3.2,0,1,6,3255507267,0,-1,-1,0,-1,-1,0,-1,-1,10,110,90,10,47,44,1,0,0,1,2,1,4210384742,1,1,0,0,0,1,2560,1440,2,1015,138,0,2343085426|104,17859,45,72|101,80,104,69|108,162,66,76|108,123,69,76|111,107,75,79|119,116,73,87|111,123,69,79|114,162,66,82|108,123,69,76|100,116,73,68"
    ]
    
    # 사용자 B의 등록 패턴들 (helloworld)
    user_b_patterns = [
        "0,3.2,0,1,6,3255507267,0,-1,-1,0,-1,-1,0,-1,-1,13,128,111,14,82,154,1,0,0,1,2,1,4210384742,1,1,0,0,0,1,2560,1440,2,1015,138,0,2343085426|104,17859,45,72|101,80,104,69|108,162,66,76|108,123,69,76|111,107,75,79|119,116,73,87|111,123,69,79|114,162,66,82|108,123,69,76|100,116,73,68",
        "0,3.2,0,1,6,3255507267,0,-1,-1,0,-1,-1,0,-1,-1,15,136,115,16,78,144,1,0,0,1,2,1,4210384742,1,1,0,0,0,1,2560,1440,2,1015,138,0,2343085426|104,17859,45,72|101,80,104,69|108,162,66,76|108,123,69,76|111,107,75,79|119,116,73,87|111,123,69,79|114,162,66,82|108,123,69,76|100,116,73,68",
        "0,3.2,0,1,6,3255507267,0,-1,-1,0,-1,-1,0,-1,-1,17,150,128,18,75,136,1,0,0,1,2,1,4210384742,1,1,0,0,0,1,2560,1440,2,1015,138,0,2343085426|104,17859,45,72|101,80,104,69|108,162,66,76|108,123,69,76|111,107,75,79|119,116,73,87|111,123,69,79|114,162,66,82|108,123,69,76|100,116,73,68"
    ]
    
    # 검증 패턴 (helloworld)
    verification_pattern = "0,3.2,0,1,6,3255507267,0,-1,-1,0,-1,-1,0,-1,-1,20,154,135,21,71,127,1,0,0,1,2,1,4210384742,1,1,0,0,0,1,2560,1440,2,1015,138,0,2343085426|104,17859,45,72|101,80,104,69|108,162,66,76|108,123,69,76|111,107,75,79|119,116,73,87|111,123,69,79|114,162,66,82|108,123,69,76|100,116,73,68"
    
    print("🔍 패턴 분석 결과 (helloworld)")
    print("=" * 60)
    
    # 1. 키보드 이벤트 섹션 비교
    print("\n📊 1. 키보드 이벤트 섹션 비교")
    print("-" * 40)
    
    all_patterns = user_a_patterns + user_b_patterns + [verification_pattern]
    keyboard_events = []
    
    for i, pattern in enumerate(all_patterns):
        # 파이프(|) 이후 부분이 키보드 이벤트
        if '|' in pattern:
            keyboard_part = pattern.split('|')[1:]
            keyboard_events.append(keyboard_part)
            print(f"패턴 {i+1}: {keyboard_part}")
    
    # 모든 키보드 이벤트가 동일한지 확인
    if len(set(str(event) for event in keyboard_events)) == 1:
        print("\n❌ 문제 발견: 모든 패턴의 키보드 이벤트가 동일합니다!")
        print("   → TypingDNA가 사용자를 구분할 수 없습니다.")
    else:
        print("\n✅ 키보드 이벤트가 다릅니다.")
    
    # 2. 메타데이터 섹션 비교
    print("\n📊 2. 메타데이터 섹션 비교")
    print("-" * 40)
    
    for i, pattern in enumerate(all_patterns):
        # 파이프(|) 이전 부분이 메타데이터
        if '|' in pattern:
            metadata_part = pattern.split('|')[0]
            # 메타데이터에서 변동되는 부분 추출 (6,93,62,6,44,35 같은 부분)
            parts = metadata_part.split(',')
            if len(parts) >= 20:
                variable_part = ','.join(parts[15:21])  # 변동되는 부분
                print(f"패턴 {i+1} 변동 부분: {variable_part}")
    
    # 3. 텍스트 길이 분석
    print("\n📊 3. 텍스트 길이 분석")
    print("-" * 40)
    print("helloworld: 10글자 (gemini보다 4글자 더 긴 텍스트)")
    print("키보드 이벤트 개수: 10개 (h,e,l,l,o,w,o,r,l,d)")
    print("더 긴 텍스트로 인해 타이핑 패턴의 차이가 더 명확해질 수 있음")
    
    # 4. 문제점 요약
    print("\n📊 4. 문제점 요약")
    print("-" * 40)
    print("❌ 주요 문제점:")
    print("   1. 키보드 이벤트가 모든 패턴에서 동일함")
    print("   2. 메타데이터만 미세하게 다름")
    print("   3. 실제 타이핑이 아닌 인위적으로 생성된 데이터")
    print("   4. TypingDNA 알고리즘이 키보드 이벤트를 주요 지표로 사용")
    
    print("\n💡 해결 방안:")
    print("   1. 실제 타이핑으로 패턴 생성")
    print("   2. 각 패턴마다 다른 키보드 이벤트 필요")
    print("   3. HTML에서 실제 사용자가 타이핑한 패턴 사용")
    print("   4. helloworld는 더 긴 텍스트이므로 실제 타이핑 시 더 명확한 차이 가능")

if __name__ == "__main__":
    analyze_patterns() 